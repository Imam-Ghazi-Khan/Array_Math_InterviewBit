
    public ArrayList<Interval> mergeOverlapppingIntervals(ArrayList<Interval> intervals) {
        
        if(intervals.size()<=1)                                                           //if there is only one intervals,return it
        {
            return intervals;
        }
        
        Collections.sort(intervals, new Comparator<Interval>()                              //Sorting according to intervals's start values so that comparing intervals is with the next element
        {
            public int compare(Interval i1,Interval i2)
            {
                return Integer.compare(i1.start,i2.start);
            }
        });
        
        ArrayList<Interval> output=new ArrayList();                                         //output array
        
        Interval lastResult = intervals.get(0);                                            //last result of intervals after merging(or not merging) with next interval
                                                                                           //initialized with first interval
        for(int i=1;i<intervals.size();i++)                                                //loop  from second element coz of line no. 20
        {
            Interval currentInterval = intervals.get(i);                                   //current traversal of intervals
                
            if(currentInterval.start<=lastResult.end)                                      //if current interval's start is greater than last result interval's end,it means the intervals overlap
            {   
                lastResult.end=Math.max(lastResult.end,currentInterval.end);               //updating lastResult of intervals after merging it with current interval
            }
            else                                                                           //last result of interval and current interval are not overlapping
            {   
                output.add(lastResult);                                                    //adding last result of interval to output array
                lastResult = currentInterval;                                              //updating last result with current interval
            }
        }
        
        output.add(lastResult) ;                        
        return output;
    }
